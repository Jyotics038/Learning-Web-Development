{"version":3,"sources":["script.js"],"names":["movements","interestRate","pin","account3","owner","account4","account1","account2","labelWelcome","labelSumIn","document","querySelector","labelTimer","containerApp","containerMovements","btnLogin","btnTransfer","btnLoan","btnClose","inputLoginUsername","inputLoginPin","inputTransferAmount","inputLoanAmount","inputCloseUsername","inputClosePin","btnSort","innerHTML","insertAdjacentHTML","displayMovements","accs","forEach","mov","i","acc","username","toLowerCase","join","concat","type","html","console","calcDisplayBalance","balance","split","map","name","labelBalance","createUsernames","log","reduce","labelSumOut","textContent","currentAccount","calcDisplaySummary","filter","int","out","labelSumInterest","Math","abs","interest","addEventListener","arr","preventDefault","accounts","e","find","value","Number"],"mappings":"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","file":"script.min.js","sourcesContent":["'use strict';\n\n/////////////////////////////////////////////////\n/////////////////////////////////////////////////\n// BANKIST APP\n\n// Data\nconst account1 = {\n  owner: 'Jonas Schmedtmann',\n  movements: [200, 450, -400, 3000, -650, -130, 70, 1300],\n  interestRate: 1.2, // %\n  pin: 1111,\n};\n\nconst account2 = {\n  owner: 'Jessica Davis',\n  movements: [5000, 3400, -150, -790, -3210, -1000, 8500, -30],\n  interestRate: 1.5,\n  pin: 2222,\n};\n\nconst account3 = {\n  owner: 'Steven Thomas Williams',\n  movements: [200, -200, 340, -300, -20, 50, 400, -460],\n  interestRate: 0.7,\n  pin: 3333,\n};\n\nconst account4 = {\n  owner: 'Sarah Smith',\n  movements: [430, 1000, 700, 50, 90],\n  interestRate: 1,\n  pin: 4444,\n};\n\nconst accounts = [account1, account2, account3, account4];\n\n// Elements\nconst labelWelcome = document.querySelector('.welcome');\nconst labelDate = document.querySelector('.date');\nconst labelBalance = document.querySelector('.balance__value');\nconst labelSumIn = document.querySelector('.summary__value--in');\nconst labelSumOut = document.querySelector('.summary__value--out');\nconst labelSumInterest = document.querySelector('.summary__value--interest');\nconst labelTimer = document.querySelector('.timer');\n\nconst containerApp = document.querySelector('.app');\nconst containerMovements = document.querySelector('.movements');\n\nconst btnLogin = document.querySelector('.login__btn');\nconst btnTransfer = document.querySelector('.form__btn--transfer');\nconst btnLoan = document.querySelector('.form__btn--loan');\nconst btnClose = document.querySelector('.form__btn--close');\nconst btnSort = document.querySelector('.btn--sort');\n\nconst inputLoginUsername = document.querySelector('.login__input--user');\nconst inputLoginPin = document.querySelector('.login__input--pin');\nconst inputTransferTo = document.querySelector('.form__input--to');\nconst inputTransferAmount = document.querySelector('.form__input--amount');\nconst inputLoanAmount = document.querySelector('.form__input--loan-amount');\nconst inputCloseUsername = document.querySelector('.form__input--user');\nconst inputClosePin = document.querySelector('.form__input--pin');\n\nconst displayMovements = function (movements) {\n  containerMovements.innerHTML = '';\n  //.textContent=0\n\n  movements.forEach(function (mov, i) {\n    const type = mov > 0 ? 'deposit' : 'withdrawal';\n\n    const html = `\n    <div class=\"movements__row\">\n          <div class=\"movements__type \n          movements__type--${type}\">${i + 1} ${type}</div>\n          <div class=\"movements__value\">${mov}</div>\n        </div>\n    `;\n    containerMovements.insertAdjacentHTML('afterbegin', html);\n  });\n};\ndisplayMovements(account1.movements);\n\nconst createUsernames = function (accs) {\n  accs.forEach(function (acc) {\n    acc.username = acc.owner\n      .toLowerCase()\n      .split(' ')\n      .map(name => name[0])\n      .join('');\n  });\n  // const username = user\n  //   .toLowerCase()\n  //   .split(' ')\n  //   .map(function (name) {\n  //     return name[0];\n  //   })\n  //   .join('');\n  // return username;\n};\n\ncreateUsernames(accounts);\nconsole.log(accounts);\n\nconst calcDisplayBalance = function (movements) {\n  const balance = movements.reduce((acc, mov) => acc + mov, 0);\n  labelBalance.textContent = `${balance} EUR`;\n};\ncalcDisplayBalance(account1.movements);\n\nconst calcDisplaySummary = function (movements) {\n  const incomes = movements\n    .filter(mov => mov > 0)\n    .reduce((acc, mov) => acc + mov, 0);\n  labelSumIn.textContent = `${incomes} EUR`;\n\n  const out = movements\n    .filter(mov => mov < 0)\n    .reduce((acc, mov) => acc + mov, 0);\n  labelSumOut.textContent = `${Math.abs(out)} EURO`;\n\n  const interest = movements\n    .filter(mov => mov > 0)\n    .map(deposit => (deposit * 1.2) / 100)\n    .filter((int, i, arr) => {\n      console.log(arr);\n      return int >= 1;\n    })\n    .reduce((acc, int) => acc + int, 0);\n  labelSumInterest.textContent = `${interest} EURO`;\n};\ncalcDisplaySummary(account1.movements);\n\n//Event handler\nlet currentAccount;\n\nbtnLogin.addEventListener('click', function (e) {\n  //prevent form from submitting\n  e.preventDefault();\n\n  currentAccount = accounts.find(\n    acc => acc.username === inputLoginUsername.value\n  );\n  console.log(currentAccount);\n\n  if (currentAccount.pin === Number(inputLoginPin.value)) {\n    console.log('Login');\n  }\n});\n\n//console.log(containerMovements.innerHTML);\n/////////////////////////////////////////////////\n/////////////////////////////////////////////////\n// LECTURES\n\n//const movements = [200, 450, -400, 3000, -650, -130, 70, 1300];\n\n/////////////////////////////////////////////////\n\n/*\n//SLICE\nlet arr = ['a', 'b', 'c', 'd', 'e'];\nconsole.log(arr.slice(2)); //c,d,e\nconsole.log(arr.slice(2, 4)); //c,d\nconsole.log(arr.slice(-2)); //d,e\nconsole.log(arr.slice(-1)); //e\nconsole.log(arr.slice(1, -2)); // b,c\nconsole.log(arr.slice()); //copy of array\nconsole.log([...arr]); //copr of array\n\n//SPLICE METHOD-delete extracted elements\nconsole.log(arr.splice(2)); //c,d,e\n//arr.splice(-1); //e\nconsole.log(arr); //a,b\narr.splice(1, 2); //b,c will be deleted\n\n//REVERSE\nlet arr = ['a', 'b', 'c', 'd', 'e'];\nconst arr2 = ['j', 'i', 'h', 'g', 'f'];\nconsole.log(arr2.reverse());\n//chnaged oeiginal array so muted method\n\n//CONCAT\nconst letters = arr.concat(arr2);\nconsole.log(letters);\nconsole.log(...arr, ...arr2);\n\n//JOIN\nconsole.log(letters.join(' - '));\n*/\n\n/*\nconst movements = [200, 450, -400, 3000, -650, -130, 70, 1300];\n\n//for (const movement of movements) {\nfor (const [i, movement] of movements.entries()) {\n  if (movement > 0) {\n    console.log(`Movement ${i + 1}: You deposited ${movement}`);\n  } else {\n    console.log(`Movement ${i + 1}: You withdraw ${Math.abs(movement)}`);\n  }\n}\n\nmovements.forEach(function (mov, i, arr) {\n  if (mov > 0) {\n    console.log(`mov ${i + 1}: You deposited ${mov}`);\n  } else {\n    console.log(`mov ${i + 1}: You withdraw ${Math.abs(mov)}`);\n  }\n});\n//0:function(200)\n//1:function(450)-------------\n*/\n\n/*\n//For each with maps and sets\n\nconst currencies = new Map([\n  ['USD', 'United States dollar'],\n  ['EUR', 'Euro'],\n  ['GBP', 'Pound sterling'],\n]);\n\ncurrencies.forEach(function (value, key, map) {\n  console.log(`${key}: ${value}`);\n});\n\n//Set\nconst currenciesUnique = new Set(['USD', 'GBP', 'USD', 'EUR', 'EUR']);\nconsole.log(currenciesUnique);\ncurrenciesUnique.forEach(function (value, _, map) {\n  console.log(`${value}: ${value}`);\n});\n*/\n/*\n//Map method\nconst eurToUsd = 1.1;\nconst movements = [200, 450, -400, 3000, -650, -130, 70, 1300];\nconst movementsUSD = movements.map(function (mov) {\n  return mov * eurToUsd;\n});\n\nconst movementsUSD = movements.map(mov => mov * eurToUsd);\n\nconsole.log(movements);\nconsole.log(movementsUSD);\n\nconst movementsDescription = movements.map(\n  (mov, i) =>\n    `Movement ${i + 1}: You ${mov > 0 ? 'deposited' : 'withdraw'} ${Math.abs(\n      mov\n    )}`\n);\nconsole.log(movementsDescription);\n*/\n\n/*\n//Filter Mathod\nconst deposits = movements.filter(function (mov) {\n  return mov > 0;\n});\nconsole.log(movements);\nconsole.log(deposits);\n*/\n\n/*\n//Reduce Method\n//accumulator -> SNOWBALL\nconst balance = movements.reduce(function (acc, curr, i, arr) {\n  console.log(`Iteration ${i}: ${acc}`);\n  return acc + curr;\n}, 0);\nconsole.log(balance);\n\nconst balance = movements.reduce((acc, curr) => acc + curr, 0);\nconsole.log(balance);\n*/\n\n/*\n//Maximum value of movements array\nconst max = movements.reduce((acc, mov) => {\n  if (acc > mov) return acc;\n  else return mov;\n}, movements[0]);\nconsole.log(max);\n*/\n\n/*const eurToUsd = 1.1;\nconst movements = [200, 450, -400, 3000, -650, -130, 70, 1300];\n//PIPELINE\nconst totalDepositsUSD = movements\n  .filter(mov => mov > 0)\n  .map(mov => mov * eurToUsd)\n  .reduce((acc, mov) => acc + mov, 0);\nconsole.log(totalDepositsUSD);\n*/\n\n/*\n//find method\nconst movements = [200, 450, -400, 3000, -650, -130, 70, 1300];\nconst firstWithdrawal = movements.find(mov => mov < 0);\nconsole.log(firstWithdrawal);\n\nconsole.log(accounts);\nconst account = accounts.find(acc => acc.owner === 'Jessica Davis');\nconsole.log(account);\n*/\n"]}