{"version":3,"sources":["script.js"],"names":["btn","document","querySelector","countriesContainer","renderCountry","data","className","html","flag","name","region","population","toFixed","languages","currencies","insertAdjacentHTML","style","opacity","renderError","msg","insertAdjacentText","getJSON","url","errorMsg","fetch","then","response","ok","Error","status","json","get3Countries","c1","c2","c3","data1","data2","data3","console","log","capital"],"mappings":"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","sourcesContent":["'use strict';\n\nconst btn = document.querySelector('.btn-country');\nconst countriesContainer = document.querySelector('.countries');\n\n///////////////////////////////////////\n\nconst renderCountry = function (data, className = '') {\n  const html = `\n     <article class=\"country ${className}\">\n          <img class=\"country__img\" src=\"${data.flag}\" />\n          <div class=\"country__data\">\n            <h3 class=\"country__name\">${data.name}</h3>\n            <h4 class=\"country__region\">${data.region}</h4>\n            <p class=\"country__row\"><span>üë´</span>${(\n              +data.population / 1000000\n            ).toFixed(1)}</p>\n            <p class=\"country__row\"><span>üó£Ô∏è</span>${data.languages[0].name}</p>\n            <p class=\"country__row\"><span>üí∞</span>${\n              data.currencies[0].name\n            }</p>\n          </div>\n        </article>\n    `;\n  countriesContainer.insertAdjacentHTML('beforeend', html);\n  countriesContainer.style.opacity = 1;\n};\n//for error handling\nconst renderError = function (msg) {\n  countriesContainer.insertAdjacentText('beforeend', msg);\n  countriesContainer.style.opacity = 1;\n};\n/*\n//Rest countries info........\nconst getCountryDataAndNeighbour=function (country) {\n\n    //AJAX call country 1\nconst request = new XMLHttpRequest();\nrequest.open('GET', `https://restcountries.eu/rest/v2/name/${country}`);\nrequest.send();\n//console.log(request.responseText);\n\nrequest.addEventListener('load',function () {\n    //console.log(this.responseText);\n    const [data]=JSON.parse(this.responseText);\n    console.log(data);\n\n    //render country 1\n     renderCountry(data);\n    \n    //get neighbour country (2)\n    const [neighbour]=data.borders;\n\n    if(!neighbour) return;\n   \n     //AJAX call country 2\n    const request2 = new XMLHttpRequest();\n    request2.open('GET', `https://restcountries.eu/rest/v2/alpha/${neighbour}`);\n    request2.send();\n\n    request2.addEventListener('load',function(){\n    const data2=JSON.parse(this.responseText);\n    console.log(data2);\n\n    renderCountry(data2,'neighbour');\n})\n});\n};\n\n//getCountryDataAndNeighbour('portugal');\ngetCountryDataAndNeighbour('usa');\n// getCountryData('india');\n*/\n\n// const request=fetch('https://restcountries.eu/rest/v2/name/india');\n// console.log(request);\n\n//get countrydata by using fetch and promises\n// const getCountryData=function(country){\n//     fetch(`https://restcountries.eu/rest/v2/name/${country}`\n//     ).then(function(response){\n//         return response.json();\n//     }).then(function(data){\n//         renderCountry(data[0]);\n//     })\n\n// }\n\n// const getCountryData=function(country){\n//     fetch(`https://restcountries.eu/rest/v2/name/${country}`\n//     ).then(response=> response.json())\n//     .then(data=> renderCountry(data[0]));\n//     };\n\n// getCountryData('portugal');\n\nconst getJSON = function (url, errorMsg = 'Something went wrong') {\n  return fetch(url).then(response => {\n    if (!response.ok)\n      throw new Error(`${errorMsg}\n         (${response.status})`);\n\n    return response.json();\n  });\n};\n\n//get neighbouring country data also.....\n// const getCountryData=function(country){\n//     //Country 1\n//     fetch(`https://restcountries.eu/rest/v2/name/${country}`\n//     ).then(response=> {\n//         console.log(response);\n//         if(!response.ok)\n//         throw new Error(`Country not found (${response.status})`)\n\n//     return response.json();\n\n//     })\n//     .then(data=>{\n//          renderCountry(data[0]);\n//          const neighbour=data[0].borders[0];\n\n//          if(!neighbour) return;\n\n//          //Country 2\n//          return fetch(`https://restcountries.eu/rest/v2/alpha/${neighbour}`);\n\n//     }).then(response=>{\n//          if(!response.ok)\n//         throw new Error(`Country not found (${response.status})`)\n\n//         return response.json();\n//     })\n//     .then(data=>renderCountry(data,'neighbour'))\n//     .catch(err=>{\n//         console.error(`${err}`);\n//         renderError(`Something went wrong ${err.message}. Try again!`);\n//     })\n//     .finally(()=>{\n//         countriesContainer.style.opacity=1;\n//     });\n// };\n\n/*\n//get neighbouring country data also.....\nconst getCountryData=function(country){\n    //Country 1\n    getJSON(`https://restcountries.eu/rest/v2/name/${country}`,\n    'Country not found')\n    \n    .then(data=>{\n         renderCountry(data[0]);\n         const neighbour=data[0].borders[0];\n\n         if(!neighbour) throw new Error('No neighbour found');\n\n         //Country 2\n         return getJSON(`https://restcountries.eu/rest/v2/alpha/${neighbour}`,\n         'Country not found');\n\n\n    })\n    \n    .then(data=>renderCountry(data,'neighbour'))\n    .catch(err=>{\n        console.error(`${err}`);\n        renderError(`Something went wrong ${err.message}. Try again!`);\n    })\n    .finally(()=>{\n        countriesContainer.style.opacity=1;\n    });\n};\n\n\n//getCountryData('portugal');\ngetCountryData('dsdf');\n*/\n\n/*\n//Event loop\nconsole.log('Test start');\nsetTimeout(() => console.log('0 sec timer'), 0);\nPromise.resolve('Resolved promise 1').then(res => console.log(res));\n\nPromise.resolve('Resolved promise 2').then(res => {\n  for (let i = 0; i < 1000000000; i++) {}\n  console.log(res);\n});\n\nconsole.log('Test end');\n*/\n\n/*\n//PRomise build\nconst lotteryPromise = new Promise(function (resolve, reject) {\n  console.log('Lottery draw is happening.....');\n\n  setTimeout(function () {\n    if (Math.random() >= 0.5) {\n      resolve('You WIN!');\n    } else {\n      reject(new Error('You LOST!'));\n    }\n  }, 2000);\n});\n\nlotteryPromise.then(res => console.log(res)).catch(err => console.log(err));\n\n//Promisifying settimeout\nconst wait = function (seconds) {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, seconds * 1000);\n  });\n};\n\nwait(2)\n  .then(() => {\n    console.log('I waited for 2 seconds');\n    return wait(1);\n  })\n  .then(() => console.log('I waited for 1 sec'));\n\n  Promise.resolve('abc').then(x=>console.log(x));\n  Promise.reject('abc').then(x=>console.error(x));\n\n*/\n\n/*\n//Promisifying the geolocation\nconst getPosition =function(){\n    return new Promise(function(resol,reject){\n        navigator.geolocation.getCurrentPosition(resolve,\n            reject);\n    });\n};\n\ngetPosition().then(pos=>console.log(pos));\n*/\n\n/*\n//Consuming promises with async/await\n\nconst getPosition = function () {\n  return new Promise(function (resol, reject) {\n    navigator.geolocation.getCurrentPosition(resolve, reject);\n  });\n};\n\nconst whereAmI = async function (country) {\n    const {}=await getPosition();\n  const res = await fetch(`https://restcountries.eu/rest/v2/name/\n    ${country}`);\n  const data = await res.json();\n  console.log(data);\n  renderCountry(data[0]);\n  //console.log(res);\n};\nwhereAmI('portugal');\nconsole.log('FIRST');\n*/\n\n//Running Promises in Parallel\nconst get3Countries = async function (c1, c2, c3) {\n  try {\n    const [data1] = await getJSON(`https://restcountries.eu/rest/v2/name/\n        ${c1}`);\n    const [data2] = await getJSON(`https://restcountries.eu/rest/v2/name/\n        ${c2}`);\n    const [data3] = await getJSON(`https://restcountries.eu/rest/v2/name/\n        ${c3}`);\n\n    console.log([data1.capital, data2.capital, data3.capital]);\n  } catch (err) {\n    console.log(err);\n  }\n};\nget3Countries('portugal', 'india', 'canada');\n"],"file":"script.dev.js"}