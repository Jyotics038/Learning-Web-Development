{"version":3,"sources":["script.js"],"names":["flights","restaurant","name","location","categories","starterMenu","mainMenu","order","starterIndex","mainIndex","orderDelivery","time","address","console","log","orderPasta","ing1","ing2","ing3","orderPizza","mainIngredient","otherIngredients","openingHours","thu","open","close","fri","sat","split","firstNAme","lastName","newName","toUpperCase","join","capitalisedName","names","namesUpper","n","push","replace","message","padStart","padEnd","maskCreditCard","number","str","last","slice","length","message2","repeat"],"mappings":"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","sourcesContent":["'use strict';\n\n// Data needed for a later exercise\nconst flights =\n  '_Delayed_Departure;fao93766109;txl2133758440;11:25+_Arrival;bru0943384722;fao93766109;11:45+_Delayed_Arrival;hel7439299980;fao93766109;12:05+_Departure;fao93766109;lis2323639855;12:30';\n\n// Data needed for first part of the section\nconst restaurant = {\n  name: 'Classico Italiano',\n  location: 'Via Angelo Tavanti 23, Firenze, Italy',\n  categories: ['Italian', 'Pizzeria', 'Vegetarian', 'Organic'],\n  starterMenu: ['Focaccia', 'Bruschetta', 'Garlic Bread', 'Caprese Salad'],\n  mainMenu: ['Pizza', 'Pasta', 'Risotto'],\n\n  order: function (starterIndex, mainIndex) {\n    return [this.starterMenu[starterIndex], this.mainMenu[mainIndex]];\n  },\n\n  orderDelivery: function (\n    starterIndex = 1,\n    mainIndex = 0,\n    time = '20:00',\n    address\n  ) {\n    console.log(`Order received!${this.starterMenu[starterIndex]}and\n    ${this.mainMenu[mainIndex]}will be delived to ${address} at ${time}\n    `);\n  },\n\n  orderPasta: function (ing1, ing2, ing3) {\n    console.log(`here is your delicious pasta with\n    ${ing1},${ing2},${ing3}\n    `);\n  },\n\n  orderPizza: function (mainIngredient, ...otherIngredients) {\n    console.log(mainIngredient);\n    console.log(otherIngredients);\n  },\n  openingHours: {\n    thu: {\n      open: 12,\n      close: 22,\n    },\n    fri: {\n      open: 11,\n      close: 23,\n    },\n    sat: {\n      open: 0, // Open 24 hours\n      close: 24,\n    },\n  },\n};\n\nrestaurant.orderDelivery({\n  time: '22.30',\n  address: 'narnaul,haryana',\n  mainIndex: 2,\n  starterIndex: 2,\n});\n\n/*\nDeconstructuring Arrays\nconst arr = [2, 3, 4];\nconst a = arr[0];\nconst b = arr[1];\nconst c = arr[2];\n\nconst [x, y, z] = arr;\nconsole.log(x, y, z);\nconsole.log(arr);\n\nlet [main, , secondary] = restaurant.categories;\nconsole.log(main, secondary);\n\n//Switching variables\n// const temp = main;\n// main = secondary;\n// secondary = temp;\n// console.log(main, secondary);\n\n[main, secondary] = [secondary, main];\nconsole.log(main, secondary);\n\n//console.log(restaurant.order(2, 0));\n\n//Receive 2 return values from a function\nconst [starter, mainCourse] = restaurant.order(2, 0);\nconsole.log(starter, main);\n\n//Nested  destructuring\nconst nested = [2, 4, [5, 6]];\n// const [i, , j] = nested;\n// console.log(i, j);\nconst [i, , [j, k]] = nested;\nconsole.log(i, j, k);\n\n//default values\nconst [p = 1, q = 1, r = 1] = [8, 9];\nconsole.log(p, q, r);\n*/\n\n/*//destructuring objects\nconst { name, openingHours, categories } = restaurant;\nconsole.log(name, openingHours, categories);\n\nconst {\n  name: restaurantName,\n  openingHours: hours,\n  categories: tags,\n} = restaurant;\nconsole.log(restaurantName, hours, tags);\n\n//Default values\nconst { menu = [], starterMenu: starters = [] } = restaurant;\nconsole.log(menu, starters);\n\n//Mutating variables\nlet a = 111;\nlet b = 999;\nconst obj = { a: 23, b: 7, c: 14 };\n\n({ a, b } = obj);\nconsole.log(a, b);\n\n//Nested objects\nconst {\n  fri: { open: o, close: c },\n} = openingHours;\nconsole.log(o, c);\n*/\n\n/*//Spread operator\nconst arr = [7, 8, 9];\nconst newArr = [1, 2, ...arr];\nconsole.log(newArr);\n\nconsole.log(...newArr);\nconsole.log(1, 2, 7, 8, 9);\n\nconst newMenu = [...restaurant.mainMenu, 'Gnocci'];\nconsole.log(newMenu);\n\n//Copy array\nconst mainMenuCopy = [...restaurant.mainMenu];\n\n//join two arrays\nconst menu = [...restaurant.mainMenu, ...restaurant.starterMenu];\nconsole.log(menu);\n\n//Iterators:arrays,strings,maps,sets,NOT objects\nconst str = 'Jonas';\nconst letters = [...str, ' ', 'S.'];\nconsole.log(letters);\nconsole.log(...str);\n//console.log(`${...str} Jyoti`);\n\nconst ingredients = [\n  prompt(\"Let's make pasta! Ingrediant 1?\"),\n  prompt(\"Let's make pasta! Ingrediant 2?\"),\n  prompt(\"Let's make pasta! Ingrediant 3?\"),\n];\nconsole.log(ingredients);\n\nrestaurant.orderPasta(ingredients[0], ingredients[1], ingredients[2]);\nrestaurant.orderPasta(...ingredients);\n\n//Objects\nconst newRestaurant = { foundedIn: 1998, ...restaurant, founder: 'jyoti' };\nconsole.log(newRestaurant);\n\nconst restaurantCopy = { ...restaurant };\nrestaurantCopy.name = 'Ristorante Roma';\nconsole.log(restaurantCopy.name);\nconsole.log(restaurant.name);\n*/\n\n/*//Rest Pattern\nconst [a, b, ...others] = [1, 2, 3, 4, 5];\nconsole.log(a, b, others);\n\nconst [pizza, , risotto, ...otherFood] = [\n  ...restaurant.mainMenu,\n  ...restaurant.starterMenu,\n];\nconsole.log(pizza, risotto, otherFood);\n\n//Objects\nconst { sat, ...weekdays } = restaurant.openingHours;\nconsole.log(weekdays);\n\n//2..functions\nconst add = function (...numbers) {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  console.log(sum);\n};\nadd(2, 3);\nadd(5, 3, 7, 2);\nadd(8, 2, 5, 3, 1, 4);\n\nconst x = [23, 5, 7];\nadd(...x);\n\nrestaurant.orderPizza('mushroms', 'onion', 'olives', 'spinach');\nrestaurant.orderPizza('mushroms');\n*/\n\n/*\n//Short CIRCUITING\n//use any data type,return any data type,short circuiting\nconsole.log(3 || 'Jonas'); //3\nconsole.log('' || 'Jonas'); //jonas\nconsole.log(true || 0); //true\nconsole.log(undefined || null); //null\n\nconsole.log(undefined || 0 || '' || 'Hello' || 23 || null); //Hello\n\nrestaurant.numGuests = 23;\nconst guests1 = restaurant.numGuests ? restaurant.numGuests : 10;\nconsole.log(guests1);\n\nconst guests2 = restaurant.numGuests || 10;\nconsole.log(guests2);\n\nconsole.log('---------And----------');\nconsole.log(0 && 'Jonas'); //0\nconsole.log(7 && 'Jonas'); //Jonas\n*/\n\n/*\n//For of Loop\nconst menu = [...restaurant.starterMenu, ...restaurant.mainMenu];\nfor (const item of menu) console.log(item);\n\nfor (const [i, el] of menu.entries()) {\n  //console.log(item);\n  console.log(`${i + 1}:${e}`);\n}\n*/ /*\n//Optional chaining\nif (restaurant.openingHours.mon) console.log(restaurant.openingHours.mon.open);\n\n//with optional chaining\nconsole.log(restaurant.openingHours.mon?.open);\n\n//Methods\nconsole.log(restaurant.order?.(0, 1) ?? 'Method does not exist');\n\n//Arrays\nconst users = [{ name: 'Jyoti', email: 'hdkfjgfjdg' }];\nconsole.log(users[0]?.name ?? 'User array empty');\n*/\n\n/*\n//SETS\nconst orderSet = new Set([\n  'Pasta',\n  'Pizza',\n  'Pizza',\n  'Risotta',\n  'Pasta',\n  'Pizza',\n]);\nconsole.log(orderSet);\n\nconsole.log(new Set('Jonas'));\nconsole.log(orderSet.size);\n\nconsole.log(orderSet.has('Bread'));\n\norderSet.add('Garlic Bread');\norderSet.add('Garlic Bread');\nconsole.log(orderSet);\n\norderSet.delete('Risotto');\n\nconsole.log(orderSet[2]); //doesn't work\n//orderSet.clear();\nconsole.log(orderSet);\n\nfor (const order of orderSet) console.log(order);\n\n//Example\nconst staff = ['Waiter', 'Chef', 'Waiter', 'Manager', 'Chef', 'Waiter'];\nconst staffUnique = [...new Set(staff)];\nconsole.log(staffUnique);\n*/\n\n/*\n//MAPS\nconst rest = new Map();\nrest.set('name', 'Classico Italiano');\nrest.set(1, 'Narnaul,Haryana');\n\nconsole.log(rest.set(2, 'Kanota,Jaipur'));\nconsole.log(rest.get('name'));\n\nrest.set(document.querySelector('h1'), 'Heading');\n\n//Maps Iteration\nconst question = new Map([\n  ['question', 'what is best prog lang?'],\n  [1, 'C'],\n  [2, 'Java'],\n  [3, 'Js'],\n  ['correct', 3],\n  [true, 'Correct'],\n  [false, 'Try again'],\n]);\nconsole.log(question);\n\n//console.log(Object.entries(openingHours));\n\n//quiz app\nconsole.log(question.get('question'));\nfor (const [key, value] of question) {\n  if (typeof key === 'number') console.log(`Answer ${key} : ${value}`);\n}\nconst answer = Number(prompt('Your answer'));\nconsole.log(answer);\n\nconsole.log(question.get(question.get('correct') === answer));\n*/\n\n/*\n//Working with strings part1\nconst airline = 'TAP Air Portugal';\nconst plane = 'A320';\nconsole.log(plane[0]);\nconsole.log(plane[1]);\nconsole.log(plane[2]);\nconsole.log('B737'[0]);\nconsole.log('B737'.length);\nconsole.log(airline.indexOf('r'));\nconsole.log(airline.lastIndexOf('r'));\nconsole.log(airline.indexOf('Portugal'));\n\nconsole.log(airline.slice(4));\nconsole.log(airline.slice(4, 7));\n\nconsole.log(airline.slice(0, airline.indexOf(' ')));\nconsole.log(airline.slice(airline.lastIndexOf(' ') + 1));\n\nconsole.log(airline.slice(-2));\nconsole.log(airline.slice(1, -1));\n\nconst checkMiddleSeat = function (seat) {\n  //B and E are middle seats\n  const s = seat.slice(-1);\n  if (s === 'B' || s === 'E') console.log('You got the middle seat');\n  else console.log('You get lucky');\n};\n\ncheckMiddleSeat('11B');\ncheckMiddleSeat('23C');\ncheckMiddleSeat('3E');\n\n*/\n\n/*\n//Working with strins part2\nconst airline = 'TAP Air Portugal';\nconsole.log(airline.toLowerCase());\nconsole.log(airline.toUpperCase());\n\n//fix capitalization in name\nconst passenger = 'jOnAS'; //Jonas\nconst passengerLower = passenger.toLowerCase();\nconst passengerCorrect =\n  passengerLower[0].toUpperCase() + passengerLower.slice(1);\nconsole.log(passengerCorrect);\n\n//Comparing email\nconst email = 'hello@jonas.io';\nconst loginEmail = ' Hello@Jonas.Io \\n';\n\n// const lowerEmail = loginEmail.toLowerCase();\n// const trimmedEmail = lowerEmail.trim();\n// console.log(trimmedEmail);\n\nconst normalizedEmail = loginEmail.toLowerCase().trim();\nconsole.log(normalizedEmail);\nconsole.log(email === normalizedEmail);\n\n//Replacing\nconst priceGB = '288,97E';\nconst priceUS = priceGB.replace('E', '$');\nconsole.log(priceUS);\n\nconst announcement = 'All passengers come to barding door 23';\nconsole.log(announcement.replace('door', 'gate'));\n\nconsole.log(announcement.replace(/door/g, 'gate'));\n\n//Booleans\nconst plane = 'Airbus A320neo';\nconsole.log(plane.includes('A320'));\nconsole.log(plane.startsWith('Air'));\n\nif (plane.startsWith('Airbus') && plane.endsWith('neo')) {\n  console.log('Part of new airbus family');\n}\n*/\n\n//Working with strings part3\n//split and join\nconsole.log('a+very+nice+string'.split('+'));\nconsole.log('Jyoti bansal'.split(' '));\n\nconst [firstNAme, lastName] = 'Jyoti Bansal'.split(' ');\n\nconst newName = ['Miss.', firstNAme, lastName.toUpperCase()].join(' ');\nconsole.log(newName);\n\nconst capitalisedName = function (name) {\n  const names = name.split(' ');\n  const namesUpper = [];\n\n  for (const n of names) {\n    // namesUpper.push(n[0].toUpperCase() + n.slice(1));\n    namesUpper.push(n.replace(n[0], n[0].toUpperCase()));\n  }\n  console.log(namesUpper.join(' '));\n};\ncapitalisedName('jessica ann smith devis');\ncapitalisedName('Jyoti Bansal');\n\n//Padding\nconst message = 'Go to gate 23';\nconsole.log(message.padStart(25, '+'));\nconsole.log(message.padEnd(25, '+'));\n\nconst maskCreditCard = function (number) {\n  const str = number + '';\n  const last = str.slice(-4);\n  return last.padStart(str.length, '*');\n};\n\nconsole.log(maskCreditCard(4347837983749837489));\nconsole.log(maskCreditCard('36867848647637632434'));\n\n//Repeat method\nconst message2 = 'Bad Weather...Tooo Bad ';\nconsole.log(message2.repeat(5));\n"],"file":"script.dev.js"}