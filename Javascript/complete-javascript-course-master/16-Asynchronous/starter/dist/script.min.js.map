{"version":3,"sources":["script.js"],"names":["btn","document","querySelector","countriesContainer","renderCountry","data","html","concat","arguments","length","undefined","flag","name","region","population","insertAdjacentHTML","languages","currencies","style","opacity","renderError","msg","insertAdjacentText","getJSON","url","errorMsg","fetch","then","response","ok","Error","status","json","get3Countries","c1","c2","c3","_ref","_ref2","data1","_ref3","_ref4","data2","_ref5","_ref6","data3","regeneratorRuntime","async","_context","prev","next","awrap","sent","_slicedToArray","console","capital","t0","log","stop"],"mappings":"AAAA,mnBAEA,IAAMA,IAAMC,SAASC,cAAc,gBAC7BC,mBAAqBF,SAASC,cAAc,cAI5CE,cAAgB,SAAUC,EAAV,GAAgC,IAC9CC,EAAI,kCAAAC,OAD0C,EAAAC,UAAAC,aAAAC,IAAhC,EAAA,EAA4B,GACtC,iDAAAH,OANuBF,EAAnCM,KAMY,uFAAAJ,OAI4BF,EAAKO,KAJjC,mDAAAL,OADUF,EAAAQ,OACV,8DAAAN,QAAAF,EAAAS,WAAA,KAgBVX,QAAmBY,GAhBT,8DAAAR,OAiBVF,EAAAW,UAAA,GAAAJ,KAjBU,6DAAAL,OAWEF,EAAKY,WAAW,GAAGL,KAXrB,oDAoBZT,mBAAAY,mBAAA,YAAAT,GAIAH,mBAAAe,MAAAC,QAAA,GAJMC,YAAc,SAAUC,GAC5BlB,mBAAmBmB,mBAAmB,YAAaD,GACnDlB,mBAAmBe,MAAMC,QAAU,GAiFrCI,QAAA,SAAAC,EAAA,GAAA,IAAAC,EAAA,EAAAjB,UAAAC,aAAAC,IAAA,EAAA,EAAA,uBACA,OAAAgB,MAAAF,GAAAG,KAAA,SAAAC,GACA,IAAAA,EAAAC,GAEA,MAAA,IAAAC,MAAA,GAAAvB,OAAAkB,EAAA,gBAAAlB,OAEAqB,EAAAG,OAFA,MAIA,OAAAH,EAAAI,UA+IsBC,cAAA,SAAAC,EAAAC,EAAAC,GAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAJ,mBAAAK,MAAA5B,QAAA,mDAAAhB,OAAA2B,KAAA,KAAA,EAAA,OAAAG,EAAAW,EAAAI,KAAAd,EAAAe,eAAAhB,EAAA,GAAAE,EAAAD,EAAA,GAAAU,EAAAE,KAAA,EAAAJ,mBAAAK,MAII5B,QAAO,mDAAAhB,OAJX4B,KAAA,KAAA,EAAA,OAAAK,EAAAQ,EAAAI,KAAAX,EAAAY,eAAAb,EAAA,GAIXE,EAJWD,EAAA,GAAAO,EAAAE,KAAA,GAAAJ,mBAAAK,MAAA5B,QAAA,mDAAAhB,OAAA6B,KAAA,KAAA,GAAAO,EAAAK,EAAAI,KAAAR,EAAAS,eAAAV,EAAA,GAAAE,EAAAD,EAAA,GASlBU,QAAAA,IAAAA,CAAOf,EAAMA,QAAMgB,EAASb,QAAMa,EAASV,UATzBG,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAQ,GAAAR,EAAA,MAAA,GAAAM,QAAAG,IAAAT,EAAAQ,IAAA,KAAA,GAAA,IAAA,MAAA,OAAAR,EAAAU,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAAAzB,cAAA,WAAA,QAAA","file":"script.min.js","sourcesContent":["'use strict';\n\nconst btn = document.querySelector('.btn-country');\nconst countriesContainer = document.querySelector('.countries');\n\n///////////////////////////////////////\n\nconst renderCountry = function (data, className = '') {\n  const html = `\n     <article class=\"country ${className}\">\n          <img class=\"country__img\" src=\"${data.flag}\" />\n          <div class=\"country__data\">\n            <h3 class=\"country__name\">${data.name}</h3>\n            <h4 class=\"country__region\">${data.region}</h4>\n            <p class=\"country__row\"><span>üë´</span>${(\n              +data.population / 1000000\n            ).toFixed(1)}</p>\n            <p class=\"country__row\"><span>üó£Ô∏è</span>${data.languages[0].name}</p>\n            <p class=\"country__row\"><span>üí∞</span>${\n              data.currencies[0].name\n            }</p>\n          </div>\n        </article>\n    `;\n  countriesContainer.insertAdjacentHTML('beforeend', html);\n  countriesContainer.style.opacity = 1;\n};\n//for error handling\nconst renderError = function (msg) {\n  countriesContainer.insertAdjacentText('beforeend', msg);\n  countriesContainer.style.opacity = 1;\n};\n/*\n//Rest countries info........\nconst getCountryDataAndNeighbour=function (country) {\n\n    //AJAX call country 1\nconst request = new XMLHttpRequest();\nrequest.open('GET', `https://restcountries.eu/rest/v2/name/${country}`);\nrequest.send();\n//console.log(request.responseText);\n\nrequest.addEventListener('load',function () {\n    //console.log(this.responseText);\n    const [data]=JSON.parse(this.responseText);\n    console.log(data);\n\n    //render country 1\n     renderCountry(data);\n    \n    //get neighbour country (2)\n    const [neighbour]=data.borders;\n\n    if(!neighbour) return;\n   \n     //AJAX call country 2\n    const request2 = new XMLHttpRequest();\n    request2.open('GET', `https://restcountries.eu/rest/v2/alpha/${neighbour}`);\n    request2.send();\n\n    request2.addEventListener('load',function(){\n    const data2=JSON.parse(this.responseText);\n    console.log(data2);\n\n    renderCountry(data2,'neighbour');\n})\n});\n};\n\n//getCountryDataAndNeighbour('portugal');\ngetCountryDataAndNeighbour('usa');\n// getCountryData('india');\n*/\n\n// const request=fetch('https://restcountries.eu/rest/v2/name/india');\n// console.log(request);\n\n//get countrydata by using fetch and promises\n// const getCountryData=function(country){\n//     fetch(`https://restcountries.eu/rest/v2/name/${country}`\n//     ).then(function(response){\n//         return response.json();\n//     }).then(function(data){\n//         renderCountry(data[0]);\n//     })\n\n// }\n\n// const getCountryData=function(country){\n//     fetch(`https://restcountries.eu/rest/v2/name/${country}`\n//     ).then(response=> response.json())\n//     .then(data=> renderCountry(data[0]));\n//     };\n\n// getCountryData('portugal');\n\nconst getJSON = function (url, errorMsg = 'Something went wrong') {\n  return fetch(url).then(response => {\n    if (!response.ok)\n      throw new Error(`${errorMsg}\n         (${response.status})`);\n\n    return response.json();\n  });\n};\n\n//get neighbouring country data also.....\n// const getCountryData=function(country){\n//     //Country 1\n//     fetch(`https://restcountries.eu/rest/v2/name/${country}`\n//     ).then(response=> {\n//         console.log(response);\n//         if(!response.ok)\n//         throw new Error(`Country not found (${response.status})`)\n\n//     return response.json();\n\n//     })\n//     .then(data=>{\n//          renderCountry(data[0]);\n//          const neighbour=data[0].borders[0];\n\n//          if(!neighbour) return;\n\n//          //Country 2\n//          return fetch(`https://restcountries.eu/rest/v2/alpha/${neighbour}`);\n\n//     }).then(response=>{\n//          if(!response.ok)\n//         throw new Error(`Country not found (${response.status})`)\n\n//         return response.json();\n//     })\n//     .then(data=>renderCountry(data,'neighbour'))\n//     .catch(err=>{\n//         console.error(`${err}`);\n//         renderError(`Something went wrong ${err.message}. Try again!`);\n//     })\n//     .finally(()=>{\n//         countriesContainer.style.opacity=1;\n//     });\n// };\n\n/*\n//get neighbouring country data also.....\nconst getCountryData=function(country){\n    //Country 1\n    getJSON(`https://restcountries.eu/rest/v2/name/${country}`,\n    'Country not found')\n    \n    .then(data=>{\n         renderCountry(data[0]);\n         const neighbour=data[0].borders[0];\n\n         if(!neighbour) throw new Error('No neighbour found');\n\n         //Country 2\n         return getJSON(`https://restcountries.eu/rest/v2/alpha/${neighbour}`,\n         'Country not found');\n\n\n    })\n    \n    .then(data=>renderCountry(data,'neighbour'))\n    .catch(err=>{\n        console.error(`${err}`);\n        renderError(`Something went wrong ${err.message}. Try again!`);\n    })\n    .finally(()=>{\n        countriesContainer.style.opacity=1;\n    });\n};\n\n\n//getCountryData('portugal');\ngetCountryData('dsdf');\n*/\n\n/*\n//Event loop\nconsole.log('Test start');\nsetTimeout(() => console.log('0 sec timer'), 0);\nPromise.resolve('Resolved promise 1').then(res => console.log(res));\n\nPromise.resolve('Resolved promise 2').then(res => {\n  for (let i = 0; i < 1000000000; i++) {}\n  console.log(res);\n});\n\nconsole.log('Test end');\n*/\n\n/*\n//PRomise build\nconst lotteryPromise = new Promise(function (resolve, reject) {\n  console.log('Lottery draw is happening.....');\n\n  setTimeout(function () {\n    if (Math.random() >= 0.5) {\n      resolve('You WIN!');\n    } else {\n      reject(new Error('You LOST!'));\n    }\n  }, 2000);\n});\n\nlotteryPromise.then(res => console.log(res)).catch(err => console.log(err));\n\n//Promisifying settimeout\nconst wait = function (seconds) {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, seconds * 1000);\n  });\n};\n\nwait(2)\n  .then(() => {\n    console.log('I waited for 2 seconds');\n    return wait(1);\n  })\n  .then(() => console.log('I waited for 1 sec'));\n\n  Promise.resolve('abc').then(x=>console.log(x));\n  Promise.reject('abc').then(x=>console.error(x));\n\n*/\n\n/*\n//Promisifying the geolocation\nconst getPosition =function(){\n    return new Promise(function(resol,reject){\n        navigator.geolocation.getCurrentPosition(resolve,\n            reject);\n    });\n};\n\ngetPosition().then(pos=>console.log(pos));\n*/\n\n/*\n//Consuming promises with async/await\n\nconst getPosition = function () {\n  return new Promise(function (resol, reject) {\n    navigator.geolocation.getCurrentPosition(resolve, reject);\n  });\n};\n\nconst whereAmI = async function (country) {\n    const {}=await getPosition();\n  const res = await fetch(`https://restcountries.eu/rest/v2/name/\n    ${country}`);\n  const data = await res.json();\n  console.log(data);\n  renderCountry(data[0]);\n  //console.log(res);\n};\nwhereAmI('portugal');\nconsole.log('FIRST');\n*/\n\n//Running Promises in Parallel\nconst get3Countries = async function (c1, c2, c3) {\n  try {\n    const [data1] = await getJSON(`https://restcountries.eu/rest/v2/name/\n        ${c1}`);\n    const [data2] = await getJSON(`https://restcountries.eu/rest/v2/name/\n        ${c2}`);\n    const [data3] = await getJSON(`https://restcountries.eu/rest/v2/name/\n        ${c3}`);\n\n    console.log([data1.capital, data2.capital, data3.capital]);\n  } catch (err) {\n    console.log(err);\n  }\n};\nget3Countries('portugal', 'india', 'canada');\n"]}